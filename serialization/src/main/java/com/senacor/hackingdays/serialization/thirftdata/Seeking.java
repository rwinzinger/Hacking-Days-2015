/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.senacor.hackingdays.serialization.thirftdata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-09-18")
public class Seeking implements org.apache.thrift.TBase<Seeking, Seeking._Fields>, java.io.Serializable, Cloneable, Comparable<Seeking> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Seeking");

  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AGE_RANGE_FIELD_DESC = new org.apache.thrift.protocol.TField("ageRange", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SeekingStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SeekingTupleSchemeFactory());
  }

  /**
   * 
   * @see com.senacor.hackingdays.serialization.thirftdata.Gender
   */
  public Gender gender; // required
  public Range ageRange; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see com.senacor.hackingdays.serialization.thirftdata.Gender
     */
    GENDER((short)1, "gender"),
    AGE_RANGE((short)2, "ageRange");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // GENDER
          return GENDER;
        case 2: // AGE_RANGE
          return AGE_RANGE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Gender.class)));
    tmpMap.put(_Fields.AGE_RANGE, new org.apache.thrift.meta_data.FieldMetaData("ageRange", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Range.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Seeking.class, metaDataMap);
  }

  public Seeking() {
  }

  public Seeking(
    Gender gender,
    Range ageRange)
  {
    this();
    this.gender = gender;
    this.ageRange = ageRange;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Seeking(Seeking other) {
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetAgeRange()) {
      this.ageRange = new Range(other.ageRange);
    }
  }

  public Seeking deepCopy() {
    return new Seeking(this);
  }

  @Override
  public void clear() {
    this.gender = null;
    this.ageRange = null;
  }

  /**
   * 
   * @see com.senacor.hackingdays.serialization.thirftdata.Gender
   */
  public Gender getGender() {
    return this.gender;
  }

  /**
   * 
   * @see com.senacor.hackingdays.serialization.thirftdata.Gender
   */
  public Seeking setGender(Gender gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  public Range getAgeRange() {
    return this.ageRange;
  }

  public Seeking setAgeRange(Range ageRange) {
    this.ageRange = ageRange;
    return this;
  }

  public void unsetAgeRange() {
    this.ageRange = null;
  }

  /** Returns true if field ageRange is set (has been assigned a value) and false otherwise */
  public boolean isSetAgeRange() {
    return this.ageRange != null;
  }

  public void setAgeRangeIsSet(boolean value) {
    if (!value) {
      this.ageRange = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((Gender)value);
      }
      break;

    case AGE_RANGE:
      if (value == null) {
        unsetAgeRange();
      } else {
        setAgeRange((Range)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case GENDER:
      return getGender();

    case AGE_RANGE:
      return getAgeRange();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case GENDER:
      return isSetGender();
    case AGE_RANGE:
      return isSetAgeRange();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Seeking)
      return this.equals((Seeking)that);
    return false;
  }

  public boolean equals(Seeking that) {
    if (that == null)
      return false;

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_ageRange = true && this.isSetAgeRange();
    boolean that_present_ageRange = true && that.isSetAgeRange();
    if (this_present_ageRange || that_present_ageRange) {
      if (!(this_present_ageRange && that_present_ageRange))
        return false;
      if (!this.ageRange.equals(that.ageRange))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_gender = true && (isSetGender());
    list.add(present_gender);
    if (present_gender)
      list.add(gender.getValue());

    boolean present_ageRange = true && (isSetAgeRange());
    list.add(present_ageRange);
    if (present_ageRange)
      list.add(ageRange);

    return list.hashCode();
  }

  @Override
  public int compareTo(Seeking other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAgeRange()).compareTo(other.isSetAgeRange());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgeRange()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ageRange, other.ageRange);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Seeking(");
    boolean first = true;

    sb.append("gender:");
    if (this.gender == null) {
      sb.append("null");
    } else {
      sb.append(this.gender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ageRange:");
    if (this.ageRange == null) {
      sb.append("null");
    } else {
      sb.append(this.ageRange);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check for sub-struct validity
    if (ageRange != null) {
      ageRange.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SeekingStandardSchemeFactory implements SchemeFactory {
    public SeekingStandardScheme getScheme() {
      return new SeekingStandardScheme();
    }
  }

  private static class SeekingStandardScheme extends StandardScheme<Seeking> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Seeking struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gender = Gender.findByValue(iprot.readI32());
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AGE_RANGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ageRange = new Range();
              struct.ageRange.read(iprot);
              struct.setAgeRangeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Seeking struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.gender != null) {
        oprot.writeFieldBegin(GENDER_FIELD_DESC);
        oprot.writeI32(struct.gender.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.ageRange != null) {
        oprot.writeFieldBegin(AGE_RANGE_FIELD_DESC);
        struct.ageRange.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SeekingTupleSchemeFactory implements SchemeFactory {
    public SeekingTupleScheme getScheme() {
      return new SeekingTupleScheme();
    }
  }

  private static class SeekingTupleScheme extends TupleScheme<Seeking> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Seeking struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetGender()) {
        optionals.set(0);
      }
      if (struct.isSetAgeRange()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetGender()) {
        oprot.writeI32(struct.gender.getValue());
      }
      if (struct.isSetAgeRange()) {
        struct.ageRange.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Seeking struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.gender = Gender.findByValue(iprot.readI32());
        struct.setGenderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ageRange = new Range();
        struct.ageRange.read(iprot);
        struct.setAgeRangeIsSet(true);
      }
    }
  }

}

