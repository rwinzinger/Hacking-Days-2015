/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.senacor.hackingdays.serialization.thirftdata;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-09-18")
public class Activity implements org.apache.thrift.TBase<Activity, Activity._Fields>, java.io.Serializable, Cloneable, Comparable<Activity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Activity");

  private static final org.apache.thrift.protocol.TField LAST_LOGIN_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLoginTimestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LOGIN_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("loginCount", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ActivityStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ActivityTupleSchemeFactory());
  }

  public long lastLoginTimestamp; // required
  public int loginCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_LOGIN_TIMESTAMP((short)1, "lastLoginTimestamp"),
    LOGIN_COUNT((short)2, "loginCount");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_LOGIN_TIMESTAMP
          return LAST_LOGIN_TIMESTAMP;
        case 2: // LOGIN_COUNT
          return LOGIN_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LASTLOGINTIMESTAMP_ISSET_ID = 0;
  private static final int __LOGINCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_LOGIN_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("lastLoginTimestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LOGIN_COUNT, new org.apache.thrift.meta_data.FieldMetaData("loginCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Activity.class, metaDataMap);
  }

  public Activity() {
  }

  public Activity(
    long lastLoginTimestamp,
    int loginCount)
  {
    this();
    this.lastLoginTimestamp = lastLoginTimestamp;
    setLastLoginTimestampIsSet(true);
    this.loginCount = loginCount;
    setLoginCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Activity(Activity other) {
    __isset_bitfield = other.__isset_bitfield;
    this.lastLoginTimestamp = other.lastLoginTimestamp;
    this.loginCount = other.loginCount;
  }

  public Activity deepCopy() {
    return new Activity(this);
  }

  @Override
  public void clear() {
    setLastLoginTimestampIsSet(false);
    this.lastLoginTimestamp = 0;
    setLoginCountIsSet(false);
    this.loginCount = 0;
  }

  public long getLastLoginTimestamp() {
    return this.lastLoginTimestamp;
  }

  public Activity setLastLoginTimestamp(long lastLoginTimestamp) {
    this.lastLoginTimestamp = lastLoginTimestamp;
    setLastLoginTimestampIsSet(true);
    return this;
  }

  public void unsetLastLoginTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field lastLoginTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetLastLoginTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __LASTLOGINTIMESTAMP_ISSET_ID);
  }

  public void setLastLoginTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTLOGINTIMESTAMP_ISSET_ID, value);
  }

  public int getLoginCount() {
    return this.loginCount;
  }

  public Activity setLoginCount(int loginCount) {
    this.loginCount = loginCount;
    setLoginCountIsSet(true);
    return this;
  }

  public void unsetLoginCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  /** Returns true if field loginCount is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginCount() {
    return EncodingUtils.testBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID);
  }

  public void setLoginCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LOGINCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_LOGIN_TIMESTAMP:
      if (value == null) {
        unsetLastLoginTimestamp();
      } else {
        setLastLoginTimestamp((Long)value);
      }
      break;

    case LOGIN_COUNT:
      if (value == null) {
        unsetLoginCount();
      } else {
        setLoginCount((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_LOGIN_TIMESTAMP:
      return getLastLoginTimestamp();

    case LOGIN_COUNT:
      return getLoginCount();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_LOGIN_TIMESTAMP:
      return isSetLastLoginTimestamp();
    case LOGIN_COUNT:
      return isSetLoginCount();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Activity)
      return this.equals((Activity)that);
    return false;
  }

  public boolean equals(Activity that) {
    if (that == null)
      return false;

    boolean this_present_lastLoginTimestamp = true;
    boolean that_present_lastLoginTimestamp = true;
    if (this_present_lastLoginTimestamp || that_present_lastLoginTimestamp) {
      if (!(this_present_lastLoginTimestamp && that_present_lastLoginTimestamp))
        return false;
      if (this.lastLoginTimestamp != that.lastLoginTimestamp)
        return false;
    }

    boolean this_present_loginCount = true;
    boolean that_present_loginCount = true;
    if (this_present_loginCount || that_present_loginCount) {
      if (!(this_present_loginCount && that_present_loginCount))
        return false;
      if (this.loginCount != that.loginCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lastLoginTimestamp = true;
    list.add(present_lastLoginTimestamp);
    if (present_lastLoginTimestamp)
      list.add(lastLoginTimestamp);

    boolean present_loginCount = true;
    list.add(present_loginCount);
    if (present_loginCount)
      list.add(loginCount);

    return list.hashCode();
  }

  @Override
  public int compareTo(Activity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLastLoginTimestamp()).compareTo(other.isSetLastLoginTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastLoginTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLoginTimestamp, other.lastLoginTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginCount()).compareTo(other.isSetLoginCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginCount, other.loginCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Activity(");
    boolean first = true;

    sb.append("lastLoginTimestamp:");
    sb.append(this.lastLoginTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginCount:");
    sb.append(this.loginCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ActivityStandardSchemeFactory implements SchemeFactory {
    public ActivityStandardScheme getScheme() {
      return new ActivityStandardScheme();
    }
  }

  private static class ActivityStandardScheme extends StandardScheme<Activity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Activity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_LOGIN_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastLoginTimestamp = iprot.readI64();
              struct.setLastLoginTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOGIN_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.loginCount = iprot.readI32();
              struct.setLoginCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Activity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_LOGIN_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.lastLoginTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOGIN_COUNT_FIELD_DESC);
      oprot.writeI32(struct.loginCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ActivityTupleSchemeFactory implements SchemeFactory {
    public ActivityTupleScheme getScheme() {
      return new ActivityTupleScheme();
    }
  }

  private static class ActivityTupleScheme extends TupleScheme<Activity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Activity struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastLoginTimestamp()) {
        optionals.set(0);
      }
      if (struct.isSetLoginCount()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetLastLoginTimestamp()) {
        oprot.writeI64(struct.lastLoginTimestamp);
      }
      if (struct.isSetLoginCount()) {
        oprot.writeI32(struct.loginCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Activity struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.lastLoginTimestamp = iprot.readI64();
        struct.setLastLoginTimestampIsSet(true);
      }
      if (incoming.get(1)) {
        struct.loginCount = iprot.readI32();
        struct.setLoginCountIsSet(true);
      }
    }
  }

}

